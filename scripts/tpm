#!/usr/bin/env ruby
#
#            Tone Software Corporation BSD License ("License")
# 
#                      Software Distribution Facility
#                      
# Please read this License carefully before downloading this software. By
# downloading or using this software, you are agreeing to be bound by the
# terms of this License. If you do not or cannot agree to the terms of
# this License, please do not download or use the software.
# 
# Provides ability to package software (binaries, configuration files,
# etc.) into a set of self-installable well-compressed distribution files.
# They can be installed on a target system as sub-packages and removed or
# patched if necessary. The package repository is stored together with
# installed files, so non-root installs are possible. A set of tasks can
# be specified to perform pre/post install/remove actions. Package content
# description can be used from software build environment to implement
# installation rules for trying out the binaries directly on a development
# system, thus decoupling compilation and installation rules.
# 
# Copyright (c) 2003, 2005, Tone Software Corporation
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
#   * Neither the name of the Tone Software Corporation nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

$:.push File.dirname(__FILE__)

require 'tsc/application'

class Application < TSC::Application
  class ActionArgumentError < ArgumentError
    def initialize
      super "A single action (install/remove/commit/revert) must be specified"
    end
  end

  def initialize
    super("[ [<package> | <location>] ... ]",
      [ "--install", "Perform product installation", nil ],
      [ "--remove", "Perform product deinstallation", nil ],
      [ "--commit", "Commit last installation", nil ],
      [ "--revert", "Revert last installation", nil ],
      [ "--tmp", "Temporary directory location", "directory", "-t" ],
      [ "--force", "Unconditionally update existing files", nil, "-f" ],
      [ "--nocleanup", "Do not perform cleanup on failure", nil ]
    )
  end

  def start
    handle_errors {
      prepare_environment
      process_command_line

      require 'installation/installer.rb'

      installer = Installation::Installer.new(options, script_location)
      installer.top_directory = File.dirname @top

      installer.send @action, *@packages
    }
  end

  private
  #######
  def prepare_environment
    @top = File.dirname File.dirname(__FILE__)

    localize_ruby_loadpath
    add_installation_loadpath
  end

  def add_installation_loadpath
    directories = [ @top, [ @top, '*'] ].map { |*_entry|
      Dir[File.join(_entry + ['installation'])]
    }.flatten.select { |_entry| 
      File.stat(_entry).directory?
    }
    unless directories.empty?
      $:.push File.dirname(directories.first)
    end
  end

  def process_command_line
    @options = super

    actions = %w{ install remove commit revert }.select { |_action| 
      @options.key? _action 
    }
    raise ActionArgumentError unless actions.size == 1
    @action = actions.first.intern
    @packages = ARGV
  end

  def process_install
    require 'installation/installer.rb'

    installer = Installation::Installer.new

    installer.options = @options
    installer.top_directory = File.dirname @top

    installer.install *@packages
  end
end

Application.new.start
