#!/usr/bin/env ruby
# vim: set sw=2:
=begin

             Tone Software Corporation BSD License ("License")

                       Software Distribution Facility

  Please read this License carefully before downloading this software. By
  downloading or using this software, you are agreeing to be bound by the
  terms of this License. If you do not or cannot agree to the terms of
  this License, please do not download or use the software.

  Provides ability to package software (binaries, configuration files,
  etc.) into a set of self-installable well-compressed distribution files.
  They can be installed on a target system as sub-packages and removed or
  patched if necessary. The package repository is stored together with
  installed files, so non-root installs are possible. A set of tasks can
  be specified to perform pre/post install/remove actions. Package content
  description can be used from software build environment to implement
  installation rules for trying out the binaries directly on a development
  system, thus decoupling compilation and installation rules.

  Copyright (c) 2003, 2005, Tone Software Corporation

  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Tone Software Corporation nor the names of
      its contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
  OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=end

$:.push File.expand_path(File.dirname(__FILE__))
require 'tsc/application.rb'

class Application < TSC::Application
  class ActionArgumentError < ArgumentError
    def initialize
      super 'A single action (install/remove/commit/revert) must be specified'
    end
  end

  def initialize
    super { |_conf|
      _conf.arguments = '[ [<package> | <location>] ... ]'
      _conf.options = [
        [ '--info', 'Print information about installed packages', nil ],
        [ '--install', 'Perform product installation', nil ],
        [ '--remove', 'Perform product deinstallation', nil ],
        [ '--commit', 'Commit last installation', nil ],
        [ '--revert', 'Revert last installation', nil ],
        [ '--tmp', 'Temporary directory location', 'directory', '-t' ],
        [ '--directory', 'Working directory', 'directory', '-d' ],
        [ '--force', 'Unconditionally update existing files', nil, '-f' ],
        [ '--no-cleanup', 'Do not perform cleanup on failure', nil ],
        [ '--nocleanup', 'Same as --no-cleanup, for compatibility', nil ],
        [ '--list', 'List the content of the archive', nil ],
        [ '--extract', 'Extract the archive into the current directory', nil ],
        [ '--responses', 'Use the responses from a specified file', 'yaml file', '-r' ],
        [ '--defaults', 'Accept default answers', nil, '-D' ],
        [ '--archive', 'Repackage as an archived installation tree', nil ],
        [ '--log', 'Leave the installation log file', nil, '-l'  ]
      ]
      _conf.description = [
        'Provides package management facilities. Packages can be installed, removed,',
        'reverted or committed. The utility also figures out its role based on the',
        'command name of its invocation path. For example, "tpm-install" is treated',
        'as "tpm --install", "tpm-remove" as "tpm --remove", etc.',
        '  It can also be invoked as part of a self extracting package invocation,',
        'in which case it is treated as "tpm --install".'
      ]
    }
  end

  def start
    handle_errors {
      prepare_environment
      process_command_line

      actions = %w{ install remove commit revert info } & options.keys
      raise ActionArgumentError unless actions.size == 1

      require 'rubygems'
      require 'installation/installer.rb'
      require 'tsc/config.rb'

      installer = Installation::Installer.new(self, script_location)
      installer.top_directory = File.dirname @top

      installer.send actions.first.intern, *ARGV
    }
  end

  def should_cleanup?
    options.no_cleanup? || options.nocleanup? ? false : true
  end

  def responses
    if options.responses?
      TSC::Config.parse(response_file_path).hash
    end
  end

  private
  #######

  def response_file_path
    File.expand_path options.responses, options.directory
  end

  def prepare_environment
    @top = File.expand_path(File.dirname(File.dirname(__FILE__)))
    add_installation_loadpath
  end

  def add_installation_loadpath
    $:.concat installation_folder_locations.map { |_location|
      File.dirname _location
    }
  end

  def installation_folder_locations
    [ @top, [ @top, '*'] ].map { |_entry|
      Dir[ File.join(_entry, 'installation') ].select { |_item|
        File.directory? _item
      }
    }.flatten
  end
end

Application.new.start
