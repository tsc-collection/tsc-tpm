#!/bin/sh
#
#            Tone Software Corporation BSD License ("License")
# 
#                      Software Distribution Facility
#                      
# Please read this License carefully before downloading this software. By
# downloading or using this software, you are agreeing to be bound by the
# terms of this License. If you do not or cannot agree to the terms of
# this License, please do not download or use the software.
# 
# Provides ability to package software (binaries, configuration files,
# etc.) into a set of self-installable well-compressed distribution files.
# They can be installed on a target system as sub-packages and removed or
# patched if necessary. The package repository is stored together with
# installed files, so non-root installs are possible. A set of tasks can
# be specified to perform pre/post install/remove actions. Package content
# description can be used from software build environment to implement
# installation rules for trying out the binaries directly on a development
# system, thus decoupling compilation and installation rules.
# 
# Copyright (c) 2003, 2005, Tone Software Corporation
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
#   * Neither the name of the Tone Software Corporation nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

progpath="${0}"

# DO NOT REMOVE OR RENAME the following variable, it is used by 
# distributor to hard-code a command to uncompress the archive 
# specific to a platform.
#
STREAM_UNCOMPRESS_COMMAND="uncompress -c"
CPIO_COMMAND="cpio"
ORIGINAL_WORKING_DIRECTORY=`pwd`
TRACE=no

unset RUBYOPT

exec 3>&1 4>&2

main()
{
  trap 'cleanup' EXIT HUP INT QUIT TERM
  unset VERBOSE TEMPDIR LIST EXTRACT EXTRACT_ITEMS

  options="${@}"

  scan_options "${@}"
  set entry `figure_script_name_and_location "${progpath}"`
  shift

  [ "${#}" -ne 2 ] && {
    print_location_problem
    return 2
  }
  progdir="${1}"
  progname="${2}"

  setup_temporary_directory

  case "${progname}" in
    *.tpm)
      TPM_PACKAGE_NAME="${progname}" export TPM_PACKAGE_NAME
      process_package ${options}
    ;;
    *)
      invoke_package_manager ${options}
    ;;
  esac
}

scan_options()
{
  for _option in "${@}"; do
    _action="${ACTION}"
    unset ACTION

    [ "${_action:+set}" = set ] && {
      eval "${_action}"
      continue
    }
    case "${_option}" in
      -v | --verbose)
        VERBOSE=yes
        TRACE=yes
      ;;
      --tmp | -t*)
        value=`_echo "${_option}" | sed -n 's/^-t\(.*\)$/\1/p'`
        [ "${value:+set}" = set ] && {
          TEMPDIR="${value}"
          continue
        }
        ACTION='TEMPDIR=${_option}'
      ;;
      --list)
        LIST=yes
      ;;
      --extract)
        EXTRACT=yes
        ACTION='EXTRACT_ITEMS="${EXTRACT_ITEMS} ${_option}";ACTION=${_action}'
      ;;
    esac
  done
}

setup_temporary_directory()
{
  : ${TEMPDIR:=/tmp}

  (suppress_output cd "${TEMPDIR}") || {
    trace_and_run mkdir -p "${TEMPDIR}" || exit 2
    TEMPDIR=`suppress_output cd "${TEMPDIR}" && pwd`
    register_for_cleanup "${TEMPDIR}"
  }
}

process_package()
{
  package="${progdir}/${progname}"
  tempdir="${TEMPDIR}/${progname}.temp.${$}"
  error_log="${TEMPDIR}/${progname}.errors.${$}"

  register_for_cleanup "${tempdir}" "${error_log}"
  trace_and_run suppress_output mkdir -p "${tempdir}"

  [ "${LIST:+set}" = set ] && {
    process_archive list "${package}"
    return ${?}
  }
  [ "${EXTRACT:+set}" = set ] && {
    process_archive extract "${package}"
    return ${?}
  }
  cwd=`pwd`
  trace_and_run cd "${tempdir}" && {
    process_archive extract "${package}"  && {
      RUBY='./tools/bin/ruby'
      check_ruby_platform "${RUBY}" || {
        print_error "
          |ERROR: ${progname}: Platform mismatch
          |
          |NOTE: The package you are trying to install is not binary compatible 
          |      with the current platform. Please locate the compatible package 
          |      and try it again.
          |
        "
        return 4
      }
      trace_and_run "${RUBY}" tools/bin/tpm --install "${@}" -d "${cwd}" 0<&9
      return "${?}"
    }
  }
}

process_archive()
{
  action=${1}
  archive=${2}

  shift
  shift

  exec 9<&0 0<"${archive}"
  while read line; do
    [ _"${line}"_ = _'__END__'_ ] && {
      "${action}" "${@}"
      return ${?}
    }
  done
  print_error "
    |${progname}: Internal error (__END__ not found)
  "
  return 3
}

list()
{
  trace_and_run ${STREAM_UNCOMPRESS_COMMAND} | trace_and_run "${CPIO_COMMAND}" -itdv "${@}"
}

extract()
{
  error_codes=`{
    (trace_and_run ${STREAM_UNCOMPRESS_COMMAND} || _echo ${?} 1>&5) | {
      (trace_and_run ${CPIO_COMMAND} -idvu ${EXTRACT_ITEMS} 2>&1 || _echo ${?} 1>&5) | {
        # The following is needed because cpio option -v on Linux sends
        # its output to stderr. So in case of error we need the data in 
        # the error log file available for reporting.
        #
        while read line; do
          _echo "${line}"; _echo "${line}" 1>&2
          # The work-around for AIX: when not enough space on output device,
          # cpio on AIX does not fail immediatelly, rather tries to go on with
          # an error message that starts with <cpio:> or <cpio :>
          #
          case "${line}" in
            'cpio:'* | 'cpio :'*)
              echo 3 1>&5
              break
            ;;
          esac
        done | progress Unpacking 1>&3
      }
    }
  } 5>&1 2>"${error_log}"`

  [ "${error_codes:+set}" = set ] && {
    print_error "
      |ERROR: ${progname}: Unpacking failed, please use option -v to get details.
      |
      |NOTE: Most likely causes may be one of the following:
      |      o Wrong platform (no platform specific decompression utility)
      |      o Insufficient privileges in the current working directory
      |      o Insufficient privileges in ${TEMPDIR}

    "
    [ "${VERBOSE:+set}" = set ] && {
      tail -20 "${error_log}" | sed 's/^/stderr> /' 1>&2
    }
    return 4
  }
  return 0
}

progress()
{
  title="${1}"
  indent="${2:-2}"
  margin="${3:-75}"

  counter=`expr "${title}" : '.*'`
  indent_string=`printf "%${indent}.${indent}s" ""`

  _echo "${title} \c"
  while read line; do
    [ "${counter}" -gt "${margin}" ] && {
      marker="\n${indent_string}."
      counter="${indent}"
    }
    _echo "${marker}\c"
    marker='.'
    counter=`expr "${counter}" + 1`
  done
  _echo
}

invoke_package_manager()
{
  manager=`figure_package_manager` || {
    print_manager_problem
    return 3
  }
  action=`figure_package_action`
  RUBYTEMP="${TEMPDIR}/ruby.${$}"

  register_for_cleanup "${RUBYTEMP}"
  setup_ruby_executable "${RUBYTEMP}" || {
    print_ruby_problem
    return 4
  }
  trace_and_run "${RUBYTEMP}" -I "${progdir}" "${manager}" "--${action}" "${@}"
}

setup_ruby_executable()
{
  _executable="${@}"
  _file=`find_file_in_path "ruby" "${progdir}:${progdir}/tools/bin:${PATH}"`

  is_program "${_file}" && {
    trace_and_run suppress_output "cp '${_file}' '${_executable}'" && {
      trace_and_run suppress_output "chmod a+x '${_executable}'" && {
	return 0
      }
    }
  }
}

check_ruby_platform()
{
  (
    "${1}" -I `dirname "${1}"` -r tsc/application -e '
      TSC::Application.new.start { 
        require "etc"
        puts Etc.getlogin 
      }
    '
  ) 1>/dev/null 2>&1
}

figure_package_action()
{
  _echo ${progname}|sed 's/^[^-]*--*//'
}

figure_package_manager()
{
  _manager_name=`_echo ${progname}|sed 's/--*.*$//'`

  [ "${_manager_name:+set}" = set ] && {
    for _manager in "${_manager_name}" "tools/bin/${_manager_name}"; do
      _manager_path="${progdir}/${_manager}"
      is_regular_file "${_manager_path}" && {
	_echo ${_manager_path}
	return 0
      }
    done
  }
  return 1
}

figure_script_name_and_location()
{
  _path="${1}"
  is_path "${_path}" || return 1

  _location=`absolute_location "${_path}"`
  _name=`basename "${_path}"`

  case "${_name}" in
    tpm-*)
    ;;
    *)
      set entry `ls -l "${_path}"`
      shift

      case "${1}" in
        l*) 
          while [ ${#} -ne 1 ]; do
            shift
          done

          if is_absolute_path "${1}"; then
            _link="${1}"
          else
            _link="${_location}/${1}"
          fi

          figure_script_name_and_location "${_link}"
          return $?
        ;;
      esac
  esac

  echo "${_location}" "${_name}"
  return 0
}

is_path()
{
  case "${1}" in
    /* | */* | */ )
      return 0
    ;;
  esac

  return 1
}

is_absolute_path()
{
  case "${1}" in
    /*)
      return 0
    ;;
  esac

  return 1
}

absolute_location()
{
  (cd `dirname "${1}"` && pwd)
}

print_location_problem()
{
  print_error "
    |ERROR: ${progpath}: Cannot figure out own location.
    |
    |NOTE: Make sure \"${progpath}\" is invoked either directly as a reqular
    |      executable or via a shell with a path specification for
    |      the script.
  " 
}

print_manager_problem()
{
  print_error "
    |ERROR: ${progname}: No package manager found in the script's location
  "
}

print_ruby_problem()
{
  print_error "
    |ERROR: ${progname}: Cannot setup ruby executable
  "
}

print_environment()
{
  print_message "
    |progpath='${progpath}'
    |progname='${progname}'
    |progdir='${progdir}'
  "
}

###

suppress_output()
{
  eval "${@}" >/dev/null 2>&1
}

suppress_error_output()
{
  eval "${@}" 2>/dev/null
}

trace_and_run()
{
  _commands=
  while [ ${#} -gt 0 ]; do
    case "${1}" in
      suppress_output|trace_and_run)
        _commands="${_commands}${1} "
	shift
      ;;
      *)
        break
      ;;
    esac
  done

  [ "${TRACE}" = yes ] && {
    print_error "=> ${@}"
  }
  ${_commands} "${@}"
}

find_file_in_path()
{
  _file="${1}"
  _path="${2}"

  _ifs="${IFS}"
  IFS=:
  set entry ${_path}
  shift
  IFS="${_ifs}"

  for _directory in "${@}"; do
    _path="${_directory}/${_file}"
    is_regular_file "${_path}" && {
      _echo "${_path}"
      return 0
    }
  done
  return 1
}

resolve_symlink()
{
  file="${1}"
  set -- entry `suppress_error_output "ls -ld '${file}'"`
  case "${2}" in
    l*)
      while [ "${#}" -ne 1 ]; do
        shift
      done
      link="${1}"
      case "${link}" in
        /*)
          echo "${link}"
        ;;
        *)
          echo `dirname "${file}"`/${link}
        ;;
      esac
    ;;
    *)
      echo "${file}"
    ;;
  esac
}

is_regular_file()
{
  file="${@}"
  suppress_output "ls -ldL '${file}' | grep '^-'"
}

invoke_file_command()
{
  file `resolve_symlink "${1}"`
}

is_program()
{
  file="${@}"
  is_regular_file "${file}" && {
    suppress_output "invoke_file_command '${file}' | grep 'executable'"
  }
}

print_message()
{
  _echo "${@}" | sed '/^[ \t]*$/d;s/^[ \t]*|//' 1>&3 
}

print_error()
{
  print_message "${@}" 3>&4
}

cleanup_list=
register_for_cleanup()
{
  for item in "${@}"; do
    cleanup_list="${item}<:>${cleanup_list}"
  done
}

cleanup()
{
  exit_code="${?}"

  _ifs="${IFS}"
  IFS='<:>'
  set entry ${cleanup_list}
  shift
  IFS=${_ifs}

  [ "${#}" -ne 0 ] && trace_and_run cd "${ORIGINAL_WORKING_DIRECTORY}"

  for _entry in "${@}"; do
    eval _entry="${_entry}"
    [ "${_entry:+set}" = set ] && {
      trace_and_run rm -rf "${_entry}"
    }
  done
  cleanup_list=
  exit "${exit_code}"
}

if [ "`echo -e`" = "-e" ]; then
  _echo()
  {
    echo "${@}"
  }
else
  _echo()
  {
    echo -e "${@}"
  }
fi

main "${@}"
exit ${?}
__END__
