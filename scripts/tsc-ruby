#!/usr/bin/env ruby
=begin
  Copyright (c) 2006, Gennady Bystritsky <bystr@mac.com>
  
  Distributed under the MIT Licence.
  This is free software. See 'LICENSE.MIT' for details.
  You must read and accept the license prior to use.
=end

$:.push File.dirname(__FILE__)
require 'tsc/application.rb'

class Application < TSC::Application

  in_generator_context do |_content|
    _content << '#!' + figure_ruby_path
    _content << '$:.unshift ' + installation_tools_bin.inspect
    _content << IO.readlines(__FILE__).slice(1..-1)
  end

  def initialize
    super('[<script>] [<custom options>]',
      [ '--test', 'Run internal tests', nil ],
      [ '--eval', 'Evaluate Ruby code', 'program', '-e' ],
      [ '--interactive', 'Start irb', nil, '-i' ],
      [ '--path', 'Look up program using PATH', nil, '-S' ],
      [ '--require', 'Require a file', 'file', '-r' ]
    )
  end

  def start
    handle_errors {
      process_command_line true

      Array(options['require']).each do |_file|
        require _file
      end

      throw :TEST if options.has_key?('test')

      workspace = Workspace.new(options)

      if options.key?('interactive')
        require 'tsc/irb.rb'

        IRB.start_for_binding(workspace.workspace)
        exit 0
      end

      code = options['eval']

      if code
        workspace.process(code, '-e')
        exit 0
      end

      unless ARGV.empty? 
        program = ARGV.first.strip
        unless program.slice(0) == ?-
          ARGV.shift
          if program.slice(0) != ?/ and options.path?
            choices = ENV['PATH'].split(File::PATH_SEPARATOR).map { |_folder|
              path = File.join(_folder, program)
              path if File.file?(path) and File.executable?(path)
            }.compact
            program = choices.first unless choices.empty?
          end
          File.open(program) do |_io|
            workspace.process _io, program
          end
          exit 0
        end
      end

      workspace.process $stdin, '(stdin)'
      exit 0
    }
  end

  private
  #######

  class Workspace
    attr_reader :options

    def initialize(options)
      @options = options
    end

    def process(content, scope)
      eval content.map.join, workspace, scope
    end

    def workspace
      binding
    end

    def to_s
      'tsc'
    end

  end
end

unless defined? Test::Unit::TestCase
  catch :TEST do
    Application.new.start
    exit 0
  end
end

require 'test/unit'

class ApplicationTest < Test::Unit::TestCase
  def test_something
    flunk 'Not implemented'
  end

  def setup
    @app = Application.new
  end

  def teardown
    @app = nil
  end
end
